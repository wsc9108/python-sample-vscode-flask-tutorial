# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  # Replace this name with that of the Azure service connection in your DevOps project
  ConnectedServiceName: 'conn-to-rg-for-pythonlinuxwebapp'

  # Replace this name to match the name of the App Service you created earlier
  WebAppName: 'jwmsdocs-flaskpipelines'

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'

# The | symbol is a continuation character, indicating a multi-line script.
# A single-line script can immediately follows "- script:" without the |.
- script: |
    # antenv is the virtual environment name that App Service expects
    python3.6 -m venv antenv
    source antenv/bin/activate
    pip3.6 install setuptools
    pip3.6 install -r requirements.txt

  # The displayName is shows in the pipeline UI when a build runs
  displayName: 'Install Dependencies'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true # (no value); this input is optional

- task: AzureRMWebAppDeployment@4
  displayName: Azure App Service Deploy
  inputs:
    appType: webAppLinux
    RuntimeStack: 'PYTHON|3.6'
    ConnectedServiceName: $(ConnectedServiceName)
    WebAppName: $(WebAppName)
    Package: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'

    # The following parameter is specific to the Flask example code. You may
    # or may not need a startup command for your own app.

    StartupCommand: 'startup.txt'